@model BeYourMarket.Web.Models.ListingUpdateModel

@{
    ViewBag.Title = "[[[Listing Update]]]";
}

@section Styles {
    <link href="~/Content/bootstrap-fileinput/css/fileinput.min.css" rel="stylesheet" />
}

<div class="wraper container-fluid">

    <div class="row">
        <div class="col-sm-12">
            <div class="panel panel-default">
                <div class="panel-heading"><h3 class="panel-title">[[[Listing Update]]]</h3></div>
                <div class="panel-body">
                    <form action="@Url.Action("ListingUpdate", "Listing")" id="listngUpdateForm" method="post" class="form-horizontal" role="form" enctype="multipart/form-data" onkeypress="return event.keyCode != 13;">
                        @Html.Partial("_UserMessage")
                        @Html.ValidationSummary(true, string.Empty, new { @class = "alert alert-danger" })

                        @Html.HiddenFor(x=> x.ListingItem.ID)
                        <div class="form-group">
                            <label class="col-sm-2 control-label">ID</label>
                            <div class="col-sm-10">
                                <p class="form-control-static">@Model.ListingItem.ID</p>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[Category]]]</label>
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.CategoryID, new SelectList(Model.Categories, "ID", "Name", Model.ListingItem.CategoryID), new { @class = "form-control" })
                            </div>
                        </div>

                        <div id="listingTypesPlaceHolder">
                            @Html.Partial("_ListingTypes", Model)
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[Title]]]</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" id="Title" name="Title" value="@Model.ListingItem.Title" required>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[Description]]]</label>
                            <div class="col-md-10">
                                <textarea class="form-control input-lg" rows="4" placeholder="Description..." id="Description" name="Description" required>@Model.ListingItem.Description</textarea>
                            </div>
                        </div>
                        @*<div class="form-group">
                            <label class="col-md-2 control-label">[[[Tag]]]</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" id="Title" name="Tag" value="@Model.ListingItem.Tag">
                            </div>
                        </div>*@
                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[Contact Name]]]</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" id="ContactName" name="ContactName" value="@Model.ListingItem.ContactName" required>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[Contact Email]]]</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" id="ContactEmail" name="ContactEmail" value="@Model.ListingItem.ContactEmail" required data-rule-email="true">
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <label class="cr-styled">
                                    <input id="ShowEmail" name="ShowEmail" type="checkbox" value="true" checked="@Model.ListingItem.ShowEmail">
                                    <i class="fa"></i>
                                    [[[Show Email]]]
                                </label>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[User]]]</label>
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.UserID, new SelectList(Model.Users, "Id", "Email", Model.ListingItem.UserID), new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[Currency]]]</label>
                            <div class="col-md-10">
                                <input type="text" maxlength="3" class="form-control" id="Currency" name="Currency" value="@Model.ListingItem.Currency">
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[Price]]]</label>
                            <div class="col-md-10">
                                <input type="number" min="0" class="form-control" id="Price" name="Price" value="@Model.ListingItem.Price" data-rule-number="true" data-rule-min="0">
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[Expiration]]]</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control datepicker" id="Expiration" name="Expiration" value="@Model.ListingItem.Expiration.ToShortDateString()">
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label">[[[IP]]]</label>
                            <div class="col-sm-10">
                                <p class="form-control-static">@Model.ListingItem.IP</p>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[Created]]]</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control datepicker" id="Created" name="Created" value="@Model.ListingItem.Created.ToShortDateString()">
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label">[[[Last Updated]]]</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control datepicker" id="LastUpdated" name="LastUpdated" value="@Model.ListingItem.LastUpdated.ToShortDateString()">
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <label class="cr-styled">
                                    <input id="Active" name="Active" type="checkbox" value="true" checked="@Model.ListingItem.Active">
                                    <i class="fa"></i>
                                    [[[Active]]]
                                </label>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <label class="cr-styled">
                                    <input id="Enabled" name="Enabled" type="checkbox" value="true" checked="@Model.ListingItem.Enabled">
                                    <i class="fa"></i>
                                    [[[Enabled]]]
                                </label>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <label class="cr-styled">
                                    <input id="Premium" name="Premium" type="checkbox" value="true" checked="@Model.ListingItem.Premium">
                                    <i class="fa"></i>
                                    [[[Premium]]]
                                </label>
                            </div>
                        </div>

                        <fieldset>
                            <legend>[[[Upload Pictures]]]</legend>
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <div class="target">
                                        <input id="files" name="files" type="file" class="file-loading" multiple>
                                    </div>
                                </div>
                            </div>
                        </fieldset>

                        <fieldset>
                            <legend>[[[Location]]]</legend>
                            <div class="form-group">
                                <label class="col-md-2">[[[Location]]]</label>
                                <div class="col-md-10">
                                    <input type="text" class="form-control input-lg" placeholder="[[[Enter Location]]]" id="Location" name="Location" value="@Model.ListingItem.Location">
                                </div>
                            </div>

                            <input type="hidden" id="Longitude" name="Longitude" value="@Model.ListingItem.Longitude" />
                            <input type="hidden" id="Latitude" name="Latitude" value="@Model.ListingItem.Latitude" />

                            <div class="col-md-offset-2 col-md-10">
                                <div class="form-group">
                                    <div id="map-canvas"></div>
                                </div>
                            </div>

                        </fieldset>

                        <div id="partialPlaceHolder">
                            @Html.Partial("_CategoryCustomFields", Model.CustomFields)
                        </div>

                        <div class="form-group">
                            <div class="col-lg-offset-2 col-lg-10">
                                <button class="btn btn-primary" type="submit"><i class="fa fa-save"></i> [[[Save]]]</button>
                                <a href="@Url.Action("Listings", "Listing")" class="btn btn-default"><i class="fa fa-remove"></i> [[[Cancel]]]</a>
                            </div>
                        </div>

                    </form>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCnq-Rg6asroWq-Ns68022iB0omx00ESkc&signed_in=true&libraries=places&callback=initMap" async defer></script>
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/fileinput.min.js"></script>
    @Html.Partial("_LocalizationFileInput")

    <script type="text/javascript">
        @{
            var preview = new System.Text.StringBuilder();
            var previewDelete = new System.Text.StringBuilder();

            foreach (var picture in Model.Pictures)
            {
                preview.AppendFormat(@"'<img src=""{0}"" class=""file-preview-image"">',", picture.Url);
                previewDelete.AppendFormat(@"{{url: '{0}',key: {1} }},", Url.Action("ListingPhotoDelete", "Listing", new { id = picture.ID }), picture.ID);
            }
        }

    var $input = $("#files");

    $input.fileinput({
        uploadAsync: false,
        showCaption: false,
        showRemove: false,
        showUpload: false,
        maxFileCount: 5,
        overwriteInitial: false,
        initialPreview: [
                @Html.Raw(preview.ToString())
        ],
        initialPreviewConfig: [
            @Html.Raw(previewDelete.ToString())
            ],
            maxFileSize: 10000,
            browseClass: "btn btn-primary",
            allowedFileTypes: ["image"],
            language: '@Context.GetPrincipalAppLanguageForRequest().ToString()'
        });

        $("#CategoryID").change(function () {
            /* Get the selected value of dropdownlist */
            var selectedID = $(this).val();
            var listingID = $("#ListingItem_ID").val();

            /* Request the partial view with .get request. */
            $.get('@Url.Action("ListingPartial", "Listing")?categoryID=' + selectedID, function (data) {

            /* data is the pure html returned from action method, load it to your page */
            $('#partialPlaceHolder').html(data);
            /* little fade in effect */
            $('#partialPlaceHolder').fadeIn('fast');
        });


        $.get('@Url.Action("ListingTypesPartial", "Listing")?categoryID=' + selectedID + '&listingID=' + listingID, function (data) {

            /* data is the pure html returned from action method, load it to your page */
            $('#listingTypesPlaceHolder').empty();
            $('#listingTypesPlaceHolder').html(data);
            /* little fade in effect */
            $('#listingTypesPlaceHolder').fadeIn('slow');
            $('#listingTypesPlaceHolder').addClass('fadeIn animated');
        });
    });
    </script>

    <script>
        //https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete
        //https://developers.google.com/maps/documentation/javascript/examples/geocoding-reverse
        function initMap() {
            var isDraggable = $(document).width() > 480 ? true : false; // If document (your website) is wider than 480px, isDraggable = true, else isDraggable = false

            var mapOptions = {
                draggable: isDraggable,
                scrollwheel: false, // Prevent users to start zooming the map when scrolling down the page
                zoom: 7,
                center: new google.maps.LatLng(39.8688, 32.2195),
            };

            @{ var hasLatLng = @Model.ListingItem.Latitude.HasValue && @Model.ListingItem.Longitude.HasValue; }
            var hasLatLng = @hasLatLng.ToString().ToLowerInvariant();

            @if (hasLatLng){
                <text>
            mapOptions = {
                center: new google.maps.LatLng(@Model.ListingItem.Latitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture), @Model.ListingItem.Longitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture)),
                zoom: 7
            };
            </text>
            };

            var map = new google.maps.Map(document.getElementById('map-canvas'),
              mapOptions);

            @if (hasLatLng){
                <text>
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(@Model.ListingItem.Latitude, @Model.ListingItem.Longitude),
                map: map
            });

            marker.setVisible(true);
            </text>
            }

            geocoder = new google.maps.Geocoder();

            var input = (document.getElementById('Location'));

            // Try HTML5 geolocation
            if (@Model.ListingItem.ID == 0){
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var pos = new google.maps.LatLng(position.coords.latitude,
                                                         position.coords.longitude);


                        geocoder.geocode({ 'latLng': pos }, function (results, status) {
                            if (status == google.maps.GeocoderStatus.OK) {
                                if (results[1]) {
                                    map.setZoom(14);
                                    map.setCenter(pos);

                                    marker = new google.maps.Marker({
                                        position: pos,
                                        map: map,
                                        content: results[1].formatted_address
                                    });
                                    infowindow.setContent(results[1].formatted_address);
                                    infowindow.open(map, marker);

                                    $('#Location').val(results[1].formatted_address);
                                    $('#Latitude').val(pos.lat());
                                    $('#Longitude').val(pos.lng());                                    

                                } else {
                                    alert('No results found');
                                }
                            } else {
                                alert('Geocoder failed due to: ' + status);
                            }
                        });
                    }, function () {
                        handleNoGeolocation(true);
                    });
                } else {
                    // Browser doesn't support Geolocation
                    handleNoGeolocation(false);
                }
            }

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            google.maps.event.addListener(autocomplete, 'place_changed', function () {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }

                // Set lat/long
                $('#Latitude').val(place.geometry.location.lat());
                $('#Longitude').val(place.geometry.location.lng());

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(12);
                }
                marker.setIcon(({
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                      (place.address_components[0] && place.address_components[0].short_name || ''),
                      (place.address_components[1] && place.address_components[1].short_name || ''),
                      (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);
            });

            google.maps.event.addDomListener(input, 'keydown', function (e) {
                if (e.keyCode == 13) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    }
                    else {
                        // Since the google event handler framework does not handle
                        e.cancelBubble = true;
                        e.returnValue = false;
                    }
                }
            });

        }

        function handleNoGeolocation(errorFlag) {
            if (errorFlag) {
                var content = 'Error: The Geolocation service failed.';
            } else {
                var content = 'Error: Your browser doesn\'t support geolocation.';
            }

            var options = {
                map: map,
                position: new google.maps.LatLng(60, 105),
                content: content
            };

            var infowindow = new google.maps.InfoWindow(options);
            map.setCenter(options.position);
        }        
    </script>
}

